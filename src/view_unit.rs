/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Viewer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct View_Unit {
    pub viewer: *mut Viewer,
}
#[test]
fn bindgen_test_layout_View_Unit() {
    assert_eq!(
        ::std::mem::size_of::<View_Unit>(),
        8usize,
        concat!("Size of: ", stringify!(View_Unit))
    );
    assert_eq!(
        ::std::mem::align_of::<View_Unit>(),
        8usize,
        concat!("Alignment of ", stringify!(View_Unit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<View_Unit>())).viewer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(View_Unit),
            "::",
            stringify!(viewer)
        )
    );
}
pub type View_Unit_t = View_Unit;
extern "C" {
    pub fn view_unit_init(this: *mut View_Unit_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn view_unit_render(this: *const View_Unit_t);
}
extern "C" {
    pub fn view_unit_release(this: *mut View_Unit_t);
}
