/* automatically generated by rust-bindgen 0.57.0 */

pub const BOARD_WIDTH: u32 = 10;
pub const BOARD_HEIGHT: u32 = 20;
pub const PieceTile_HERO: PieceTile = 0;
pub const PieceTile_SMASHBOY: PieceTile = 1;
pub const PieceTile_TEEWEE: PieceTile = 2;
pub const PieceTile_ORANGE_RICKY: PieceTile = 3;
pub const PieceTile_BLUE_RICKY: PieceTile = 4;
pub const PieceTile_CLEVELAND_Z: PieceTile = 5;
pub const PieceTile_RHODE_ISLAND_Z: PieceTile = 6;
pub const PieceTile_NONE: PieceTile = 7;
pub type PieceTile = ::std::os::raw::c_uint;
pub use self::PieceTile as PieceTile_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GameState {
    pub board_config: [[PieceTile_t; 10usize]; 20usize],
}
#[test]
fn bindgen_test_layout_GameState() {
    assert_eq!(
        ::std::mem::size_of::<GameState>(),
        800usize,
        concat!("Size of: ", stringify!(GameState))
    );
    assert_eq!(
        ::std::mem::align_of::<GameState>(),
        4usize,
        concat!("Alignment of ", stringify!(GameState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameState>())).board_config as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GameState),
            "::",
            stringify!(board_config)
        )
    );
}
pub type GameState_t = GameState;
pub const Input_DOWN: Input = 0;
pub const Input_RIGHT: Input = 1;
pub const Input_LEFT: Input = 2;
pub const Input_EMPTY: Input = 3;
pub type Input = ::std::os::raw::c_uint;
pub use self::Input as Input_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Viewer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ViewUnit {
    pub viewer: *mut Viewer,
}
#[test]
fn bindgen_test_layout_ViewUnit() {
    assert_eq!(
        ::std::mem::size_of::<ViewUnit>(),
        8usize,
        concat!("Size of: ", stringify!(ViewUnit))
    );
    assert_eq!(
        ::std::mem::align_of::<ViewUnit>(),
        8usize,
        concat!("Alignment of ", stringify!(ViewUnit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ViewUnit>())).viewer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ViewUnit),
            "::",
            stringify!(viewer)
        )
    );
}
pub type ViewUnit_t = ViewUnit;
extern "C" {
    pub fn viewUnit_init(this: *mut ViewUnit_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn viewUnit_read_event(this: *const ViewUnit_t) -> Input_t;
}
extern "C" {
    pub fn viewUnit_render(this: *const ViewUnit_t, game_state: *const GameState_t);
}
extern "C" {
    pub fn viewUnit_release(this: *mut ViewUnit_t);
}
